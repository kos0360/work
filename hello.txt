// Example program
#include <iostream>
#include <string>
#include <ctime>
#include <vector>
#include <string>

struct Brick{
    Brick()
    : n(0), b(0) {}
    int n;
    bool b;
};



struct Field{
    Field(int r, int c)
    : rows(r), collumn(c), store(r*c) {
        srand (time(NULL));
        }
    
    int rows;
    int collumn;
    std::vector<Brick> store;
    
    void generate(){
        for(int i=0; i<rows; ++i)
             for(int j=0; j<collumn; ++j)
                store[i*collumn + j].b=rand()%2;
                
        store[0].n=1; // start point
        store[0].b=1;

        store[rows*collumn-1].b=1; // end point
    }
    bool check(int r, int c, int p){
        bool f=0;
        if(r!=0){
            // check up
            if(store[(r-1)*collumn + c].n==0 && store[(r-1)*collumn + c].b!=0){
                store[(r-1)*collumn + c].n=++p;
                f=1;
            }
        }
        if(r!=rows-1){
            // check down
            if(store[(r+1)*collumn + c].n==0 && store[(r+1)*collumn + c].b!=0){
                store[(r+1)*collumn + c].n=++p;
                f=1;
            }
        }
        if(c!=0){
            // check left
            if(store[(r)*collumn + c-1].n==0 && store[(r)*collumn + c-1].b!=0){
                store[(r)*collumn + c-1].n=++p;
                f=1;
            }
        }
        if(c!=collumn-1){
            // check right
            if(store[(r)*collumn + c+1].n==0 && store[(r)*collumn + c+1].b!=0){
                store[(r)*collumn + c+1].n=++p;
                f=1;
            }
        }
        return f;
    }
    void trace(){
        int p=1;
        bool run=1;
        while(run){
            for(int i=0; i<rows; ++i)
                for(int j=0; j<collumn; ++j){

                    if(store[i*collumn + j].n==p){
                        if(i*collumn + j == rows*collumn-1) // finish location
                            run=0;
                        if(!check(i, j, p))
                            run=0;
                        else
                            ++p;
                    }
                    
                }
        }
    }
};

std::ostream& operator<<(std::ostream& os, const Field& f)
{
    for(int i=0; i<f.rows; ++i){
            
            for(int j=0; j<f.collumn; ++j){
                //os << "i" << i << "j" << j ;
                if(f.store[i*f.collumn + j].b){
                    if(f.store[i*f.collumn + j].n)
                        os << f.store[i*f.collumn + j].n;
                    else
                        os <<  " ";
                }
                else
                    os << f.store[i*f.collumn + j].b;    
            }
            os << std::endl;
    }
    return os;
}


int main()
{
    Field f(10, 50);
    f.generate();
    f.trace();
    
std::cout << f;

  std::string name;
  std::cout << "What is your name? ";
  getline (std::cin, name);
  std::cout << "Hello, " << name << "!\n";
}
